Main = { NOTHING ~ Expr* ~ NOTHING }

// Character rules
NOTHING = _{ "" }
WHITESPACE = _{ " " | "\t" | NEWLINE | COMMENT }
SP = _{ WHITESPACE }
NL = _{ NEWLINE }
CM = @{ "," ~ WHITESPACE+ }
CL = @{ ":" ~ WHITESPACE+ }

// Word rules
KW = _{ "var" | "type" | "if" | "elif" | "else" | "match" | "int" | "num" | "bool" | "char" | "str" }
COMMENT = _{ "//" ~ ANY+ | "/*" ~ (!"*\\" ~ ANY+) }
// Expressions
Expr = { (Use | ModuleAccess | Init | Decl | Assig | AddAssig | SubAssig | ListRemAssig | MulAssig | DivAssig | PowAssig | ModAssig | Typedef | If | Fn | Call ) }

Use = { "use " ~ Name }
Init = { "var " ~ Name ~ (":" ~ Type)? ~ "=" ~ Value }

Decl = { "var " ~ Name ~ ":" ~ Type }

Typedef = { "type " ~ Name ~ "=" ~ Type }

If = { "if" ~ "("? ~ Value ~ ")"? ~ Expr* ~ ("end" | Elif | Else) | "if" ~ "("? ~ Value ~ ")"? ~ "=>" ~ Expr ~ (Elif | Else)? }
Elif = { "elif" ~ "("? ~ Value ~ ")"? ~ Expr* ~ ("end" | Elif | Else) | "elif" ~ "("? ~ Value ~ ")"? ~ "=>" ~ Expr ~ (Elif | Else)? }
Else = { "else" ~ Expr* ~ "end" | "else" ~ "=>" ~ Expr }

Fn = { "fn" ~ Name ~ ArgsDef? ~ (":" ~ Type)? ~ Expr* ~ "end" }
ArgsDef = { "(" ~ (Name ~ ":" ~ Type ~ (", " ~ Name ~ ":" ~ Type)*)? ~ ")" }

Assig = { Name ~ "=" ~ Value }
AddAssig = { Name ~ "+=" ~ Value }
SubAssig = { Name ~ "-=" ~ Value }
ListRemAssig = { Name ~ "--=" ~ Value }
MulAssig = { Name ~ "*=" ~ Value }
DivAssig = { Name ~ "/=" ~ Value }
PowAssig = { Name ~ "^=" ~ Value }
ModAssig = { Name ~ "%=" ~ Value }

// Complex values
Name = @{ (ASCII_ALPHA | "_")+ }
Index = { ASCII_DIGIT }
Value = { ModuleAccess | TypeConversion | Op | And | Or | Cmp | Parenthesis | Num | Int | Bool | Char | Str | Tuple | Struct | TupleAccess | List | ListAccess | Dict | Call | Name | And | Or }
Call = { Name ~ "(" ~ (Value ~ ("," ~ Value)*)? ~ ")" }
ModuleAccess = { Name ~ "::" ~ (Call | Name) }
TypeConversion = { (TInt | TBool | TChar | TStr) ~ "(" ~ Value ~ ")" }

// Primitives
Int = @{ "-"? ~ ASCII_DIGIT+ }
Num = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ } 
Bool = { "true" | "false" }
Char = @{ "'" ~ ASCII_ALPHA ~ "'" }
Str = @{ "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }

// Composed
Tuple = { "(" ~ Value ~ ("," ~ Value)* ~ ")" }
Struct = { "(" ~ StructVal ~ ("," ~ StructVal)* ~ ")" }
StructVal = { Name ~ ":" ~ Value }
TupleAccess = { Name ~ "." ~ TupleAccessType }
TupleAccessType = { Name | Index }
List = { "[" ~ Value ~ ("," ~ Value)* ~ "]" }
ListAccess = { Name ~ "[" ~ Value ~ "]" }
DictPair = { Value ~ "->" ~ Value }
Dict = { "[" ~ DictPair ~ ("," ~ DictPair)* ~ "]" }

// Recursives
Lhs = { ModuleAccess | TypeConversion | Parenthesis | Num | Int | Bool | Char | Str | Tuple | Struct | TupleAccess | List | ListAccess | Dict | Call | Name }
Op = { Add | Sub | Mul | Div | Mod | Pow }

Add = { Lhs ~ "+" ~ Value }
Sub = { Lhs ~ "-" ~ Value }
Mul = { Lhs ~ "*" ~ Value }
Div = { Lhs ~ "/" ~ Value }
Mod = { Lhs ~ "%" ~ Value }
Pow = { Lhs ~ "^" ~ Value }

Cmp = { Less | Great | LessEq | GreatEq | Equal | NotEq | Not }
Less = { Lhs ~ "<" ~ Value }
Great = { Lhs ~ ">" ~ Value }
LessEq = { Lhs ~ "<=" ~ Value }
GreatEq = { Lhs ~ ">=" ~ Value }
Equal = { Lhs ~ "=" ~ Value }
NotEq = { Lhs ~ "!=" ~ Value }
Not = { "!" ~ Value }
Or = { (Lhs | Cmp) ~ "||" ~ Value }
And = { (Lhs | Cmp) ~ "&&" ~ Value }

Parenthesis = { "(" ~ Value ~ ")" }

// Types
Type = { TInt | TNum | TBool | TChar | TStr | TTuple | TStruct | TList | TDict | TVoid | TCustom }
TInt = { "int" }
TNum = { "num" }
TBool = { "bool" }
TChar = { "char" }
TStr = { "str" }
TTuple = { "(" ~ Type ~ ("," ~ Type)* ~ ")" }
StructMem = { Name ~ ":" ~ Type }
TStruct = { "(" ~ StructMem ~ ("," ~ StructMem)* ~ ")" }
TList  = { "[" ~ Type ~ "]" }
TDict = { "[" ~ Type ~ "->" ~ Type ~ "]" }
TVoid = { "?#!#!#NOT_ACCESSIBLE#!#!#?" }
TCustom = { (ASCII_ALPHA | "_")+ }

// TODO! Add grammars for wrong syntax.
// e.g. "var a", should annotate type "var a: TYPE"