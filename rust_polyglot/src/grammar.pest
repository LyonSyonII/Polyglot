Main = { NOTHING ~ (Expr ~ NL)* ~ (Expr ~ NL?)? ~ NOTHING }

// Character rules
NOTHING = _{ "" }
WHITESPACE = _{ " " | "\t" }
NL = _{ NEWLINE+ }
CM = @{ "," ~ WHITESPACE+ }
CL = @{ ":" ~ WHITESPACE+ }

// Word rules
KW = { "var" | "type" | "if" | "elif" | "else" | "match" | "int" | "num" | "bool" | "char" | "str" }

// Expressions
Expr = { (Init | Decl | Assig | Typedef) }
RetExpr = { "if/elseif/else/match" }
Init = { "var" ~ Name ~ (":" ~ Type)? ~ "=" ~ Value }
Decl = { "var" ~ Name ~ ":" ~ Type }
Assig = { Name ~ "=" ~ Value }
Typedef = { "type" ~ Name ~ "=" ~ Type }

// Complex values
Name = @{ !KW ~ (ASCII_ALPHA | "_")+ }
Index = { ASCII_DIGIT }
Value = { Op | Num | Int | Bool | Char | Str | Tuple | Struct | TupleAccess | Call | Name | RetExpr }
Call = { Name ~ "(" ~ Args? ~ ")" }
Args = { Value ~ ("," ~ Value)* }

// Primitives
Int = @{ "-"? ~ ASCII_DIGIT+ }
Num = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ } 
Bool = { "true" | "false" | Cmp }
Char = @{ "'" ~ ASCII_ALPHA ~ "'" }
Str = @{ "\"" ~ (!"\"" ~ ANY)+ ~ "\"" }

// Composed
Tuple = { "(" ~ Value ~ ("," ~ Value)+ ~ ")" }
Struct = { "(" ~ StructVal ~ ("," ~ StructVal)+ ~ ")" }
StructVal = { Name ~ ":" ~ Value }
StructMem = { Name ~ ":" ~ Type }
TupleAccess = { Name ~ "." ~ TupleAccessType }
TupleAccessType = { Name | Index }

// Recursives
Op = { "not_implemented" }
Cmp = { "not_implemented" }


// Types
Type = { TInt | TNum | TBool | TChar | TStr | TTuple | TStruct | TCustom }
TInt = { "int" }
TNum = { "num" }
TBool = { "bool" }
TChar = { "char" }
TStr = { "str" }
TTuple = { "(" ~ Type ~ ("," ~ Type)+ ~ ")" }
TStruct = { "(" ~ StructMem ~ ("," ~ StructMem)+ ~ ")" }
TCustom = { (ASCII_ALPHA | "_")+ }


